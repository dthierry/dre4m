{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DRE 4 M Introduction DRE 4 M or dre4m is a framework for the planing of the technological makeup of a generic sector. The current incarnation framework coalesces into a linear program (LP). The program was laid out using JuMP , which also serves as the interface between model and solver. dre4m is subject to the terms of the MIT license . Installation At the Julia REPL press ] mode, then dre4m can be obtained directly from the repository as follows, add https://github.com/dthierry/dre4m.git The dre4m layout The source is organized as follows, . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Manifest.toml # julia record of pakages \u251c\u2500\u2500 Project.toml # julia dependencies \u251c\u2500\u2500 README.md # project readme \u251c\u2500\u2500 data # data folder \u2502 \u251c\u2500\u2500 . \u251c\u2500\u2500 instance # case studies folder \u2502 \u2514\u2500\u2500 prototypes # example prototypes \u2502 \u2514\u2500\u2500 . \u251c\u2500\u2500 src # main source file \u2502 \u251c\u2500\u2500 coef # coefficient functions \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 dre4m.jl # julia module \u2502 \u251c\u2500\u2500 gestalt # problem abstract form \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 matrix # data structures \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 mods # models \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 post # results postprocessing \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u2514\u2500\u2500 utils # this generates some useful plots \u2502 \u251c\u2500\u2500 coalesce_py \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u2514\u2500\u2500 plot_py \u2502 \u2514\u2500\u2500 . \u2514\u2500\u2500 test # testing files \u251c\u2500\u2500 gestalt \u2502 \u2514\u2500\u2500 . \u251c\u2500\u2500 matrix \u2502 \u2514\u2500\u2500 . \u251c\u2500\u2500 mods \u2502 \u251c\u2500\u2500 . \u251c\u2500\u2500 retrofit \u2502 \u2514\u2500\u2500 . \u2514\u2500\u2500 runtest.jl Data requirements Before running a problem, please consult the data requirements from the input page. Contributors David Thierry, Argonne National Laboratory, ESIA division Sarang Supekar, Argonne National Laboratory, ESIA division License dre4m is licensed under the MIT software license . Additionally, dre4m utilizes several dependencies, which have their own licences. Refer to their respective repositories for more information about the licenses.","title":"Home"},{"location":"#dre4m","text":"","title":"DRE4M"},{"location":"#introduction","text":"DRE 4 M or dre4m is a framework for the planing of the technological makeup of a generic sector. The current incarnation framework coalesces into a linear program (LP). The program was laid out using JuMP , which also serves as the interface between model and solver. dre4m is subject to the terms of the MIT license .","title":"Introduction"},{"location":"#installation","text":"At the Julia REPL press ] mode, then dre4m can be obtained directly from the repository as follows, add https://github.com/dthierry/dre4m.git","title":"Installation"},{"location":"#the-dre4m-layout","text":"The source is organized as follows, . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Manifest.toml # julia record of pakages \u251c\u2500\u2500 Project.toml # julia dependencies \u251c\u2500\u2500 README.md # project readme \u251c\u2500\u2500 data # data folder \u2502 \u251c\u2500\u2500 . \u251c\u2500\u2500 instance # case studies folder \u2502 \u2514\u2500\u2500 prototypes # example prototypes \u2502 \u2514\u2500\u2500 . \u251c\u2500\u2500 src # main source file \u2502 \u251c\u2500\u2500 coef # coefficient functions \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 dre4m.jl # julia module \u2502 \u251c\u2500\u2500 gestalt # problem abstract form \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 matrix # data structures \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 mods # models \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u251c\u2500\u2500 post # results postprocessing \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u2514\u2500\u2500 utils # this generates some useful plots \u2502 \u251c\u2500\u2500 coalesce_py \u2502 \u2502 \u2514\u2500\u2500 . \u2502 \u2514\u2500\u2500 plot_py \u2502 \u2514\u2500\u2500 . \u2514\u2500\u2500 test # testing files \u251c\u2500\u2500 gestalt \u2502 \u2514\u2500\u2500 . \u251c\u2500\u2500 matrix \u2502 \u2514\u2500\u2500 . \u251c\u2500\u2500 mods \u2502 \u251c\u2500\u2500 . \u251c\u2500\u2500 retrofit \u2502 \u2514\u2500\u2500 . \u2514\u2500\u2500 runtest.jl","title":"The dre4m layout"},{"location":"#data-requirements","text":"Before running a problem, please consult the data requirements from the input page.","title":"Data requirements"},{"location":"#contributors","text":"David Thierry, Argonne National Laboratory, ESIA division Sarang Supekar, Argonne National Laboratory, ESIA division","title":"Contributors"},{"location":"#license","text":"dre4m is licensed under the MIT software license . Additionally, dre4m utilizes several dependencies, which have their own licences. Refer to their respective repositories for more information about the licenses.","title":"License"},{"location":"about/","text":"About dre4m and its underlying mathematical framework was created as part of the efforts for industrial decarbonization by the Department of Energy (DoE). todo: ASK Sarang for input.","title":"About"},{"location":"about/#about","text":"dre4m and its underlying mathematical framework was created as part of the efforts for industrial decarbonization by the Department of Energy (DoE). todo: ASK Sarang for input.","title":"About"},{"location":"input/","text":"Input data dre4m uses an excel file as input, Refer to the ./data/prototype.xlsx file for a blank protoype of the input. There are a number of sheets in the prototype file. Their description is given in the following table sheet description reference \"pointers\" to the data timeAttr quantities functions of time ( not associated with cost) costAttr quantities exclusively related to the system cost invrAttr quantities not functions of time ( not associated with cost) Reference sheet The reference sheet contains the cell location of the main components of the data-structures in dre4m . Data inputs typically are given in matrix, vector, or scalar form. Matrices and vectors require 2 addresses; matrices use upper-left and bottom-right corners coordinates, whereas vectors use the first and last element coordinates. For instance, at the timeAttr section, the \"initial capacity\" matrix requires 2 addresses, timeAttr location factor initial X : Y 1 The addresses are given in the cell next to the \"initial\" cell, and these represent the upper-left ( X , e.g. B3) and bottom-right locations ( Y , e.g. DW13), separated by a colon : . The factor column is required for floating point quantities, e.g. costs, heat rates, etc. \u2757 It is the responsability of the user to ensure that there is consistency among all the units used within the computations. E.g., suppose power is given in GWh , then heat rates must have a consistent unit, for instance, MMBTU/ GWh . Time-variant attributes: timeAttr The timeAttr sheet contains data that is a function of time but are not related to cost (e.g. in USD). For instance, Initial capacity by vintage Demand by year Average capacity factor by vintage Existing capacity heat rate by vintage New plant heat rate by year. Notes on ordering Quantities of existing assets must be given by descending order of vintage . E.g., the initial capacities must be given as shown in the following table. technology year[T] year[T-1] year[T-2] year[T-3] ... year[0] tech 1 . . . . . . tech 2 . . . . . . . . . . . . . tech I-1 . . . . . . tech I . . . . . . Quantities for new assets, are given by increasing order, e.g. 2022, 2023, etc. \u2757 Throughout the framework, the rule is, quantities must be given in increasing order of year, except existing , i.e. old plants, for which they are given in reverse order. Cost attributes: costAttr This sheet contains all attributes related to cost, viz. Capital cost Fixed O&M cost Variable O&M cost Cost of electrical power Cost of fuel Decomissioning cost. These values must be laid-out by both technology and year. Time-invariant attributes invrAttr These attributes that do not change over time, and information about the abstract retrofit and new asset forms. For example, the information in this sheet has financial and technical details, e.g., Horizon Loan term Interest rate annuity factor New plant heat rate by year. Carbon intensity Fuel based tech Carbon based tech Retrofitted plant kinds New plant kinds. Perhaps the most important information in this sheet is parameters of the abstract forms of retrofits and new plants. Abstract forms These parameters act as modifiers of the base technology. For example, a base coal-fired power plant can have a carbon capture retrofit, thus inheriting some of the base properties, while simultaneously modifying others in a substantial way. To achieve this, a multiplier must be defined. Then the model takes the base value, e.g. heat rate, and multiplies it by the specified modifier. Another way in which a base technology can be changed is by letting it switch to a different fuel, thus affecting aspects like emission output, fuel cost, and heat rate. Therefore, there modifiers of the base technology are defined as the tuple of multiplier and base fuel. So far, the current version of the model considers the following modifier pairs, Capital cost O&M costs (Fixed and Variable) Heat rate Carbon dioxide Fuel consumption Use base heat rate Miscellaneous. And, these are given in the excel table as follows, technology Description Prop. mod multiplier Prop. mod. base fuel ... i=0 , kind =0 (description) value ( >0 ) fuel index (e.g. 1, 2,...) . i=0 , kind =1 (description) value ( >0 ) fuel index (e.g. 1, 2,...) . . . . . . \u2757 Any missing value or -9999 would be interpreted as non-modifying , in other words, no changes will be made to the base technology.","title":"Input"},{"location":"input/#input-data","text":"dre4m uses an excel file as input, Refer to the ./data/prototype.xlsx file for a blank protoype of the input. There are a number of sheets in the prototype file. Their description is given in the following table sheet description reference \"pointers\" to the data timeAttr quantities functions of time ( not associated with cost) costAttr quantities exclusively related to the system cost invrAttr quantities not functions of time ( not associated with cost)","title":"Input data"},{"location":"input/#reference-sheet","text":"The reference sheet contains the cell location of the main components of the data-structures in dre4m . Data inputs typically are given in matrix, vector, or scalar form. Matrices and vectors require 2 addresses; matrices use upper-left and bottom-right corners coordinates, whereas vectors use the first and last element coordinates. For instance, at the timeAttr section, the \"initial capacity\" matrix requires 2 addresses, timeAttr location factor initial X : Y 1 The addresses are given in the cell next to the \"initial\" cell, and these represent the upper-left ( X , e.g. B3) and bottom-right locations ( Y , e.g. DW13), separated by a colon : . The factor column is required for floating point quantities, e.g. costs, heat rates, etc. \u2757 It is the responsability of the user to ensure that there is consistency among all the units used within the computations. E.g., suppose power is given in GWh , then heat rates must have a consistent unit, for instance, MMBTU/ GWh .","title":"Reference sheet"},{"location":"input/#time-variant-attributes-timeattr","text":"The timeAttr sheet contains data that is a function of time but are not related to cost (e.g. in USD). For instance, Initial capacity by vintage Demand by year Average capacity factor by vintage Existing capacity heat rate by vintage New plant heat rate by year.","title":"Time-variant attributes: timeAttr"},{"location":"input/#notes-on-ordering","text":"Quantities of existing assets must be given by descending order of vintage . E.g., the initial capacities must be given as shown in the following table. technology year[T] year[T-1] year[T-2] year[T-3] ... year[0] tech 1 . . . . . . tech 2 . . . . . . . . . . . . . tech I-1 . . . . . . tech I . . . . . . Quantities for new assets, are given by increasing order, e.g. 2022, 2023, etc. \u2757 Throughout the framework, the rule is, quantities must be given in increasing order of year, except existing , i.e. old plants, for which they are given in reverse order.","title":"Notes on ordering"},{"location":"input/#cost-attributes-costattr","text":"This sheet contains all attributes related to cost, viz. Capital cost Fixed O&M cost Variable O&M cost Cost of electrical power Cost of fuel Decomissioning cost. These values must be laid-out by both technology and year.","title":"Cost attributes: costAttr"},{"location":"input/#time-invariant-attributes-invrattr","text":"These attributes that do not change over time, and information about the abstract retrofit and new asset forms. For example, the information in this sheet has financial and technical details, e.g., Horizon Loan term Interest rate annuity factor New plant heat rate by year. Carbon intensity Fuel based tech Carbon based tech Retrofitted plant kinds New plant kinds. Perhaps the most important information in this sheet is parameters of the abstract forms of retrofits and new plants.","title":"Time-invariant attributes invrAttr"},{"location":"input/#abstract-forms","text":"These parameters act as modifiers of the base technology. For example, a base coal-fired power plant can have a carbon capture retrofit, thus inheriting some of the base properties, while simultaneously modifying others in a substantial way. To achieve this, a multiplier must be defined. Then the model takes the base value, e.g. heat rate, and multiplies it by the specified modifier. Another way in which a base technology can be changed is by letting it switch to a different fuel, thus affecting aspects like emission output, fuel cost, and heat rate. Therefore, there modifiers of the base technology are defined as the tuple of multiplier and base fuel. So far, the current version of the model considers the following modifier pairs, Capital cost O&M costs (Fixed and Variable) Heat rate Carbon dioxide Fuel consumption Use base heat rate Miscellaneous. And, these are given in the excel table as follows, technology Description Prop. mod multiplier Prop. mod. base fuel ... i=0 , kind =0 (description) value ( >0 ) fuel index (e.g. 1, 2,...) . i=0 , kind =1 (description) value ( >0 ) fuel index (e.g. 1, 2,...) . . . . . . \u2757 Any missing value or -9999 would be interpreted as non-modifying , in other words, no changes will be made to the base technology.","title":"Abstract forms"},{"location":"license/","text":"MIT License Copyright (c) 2022 UChicago Argonne, LLC. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2022 UChicago Argonne, LLC. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"model/","text":"Model This section provides a shortcut description of the model behind dre4m . For the purpose of laying out the core concepts, notation has been simplified from the original paper. The problem behind the diversification of the technology of a sector can be summarized by the following linear program, \\[ \\begin{equation} \\begin{split} \\min\\; O\\left(\\mathbf{x}, \\mathbf{p}\\right):= \\alpha \\, \\mathtt{NPV} \\left(\\mathbf{x}, \\mathbf{p}\\right) + \\beta \\, \\mathtt{termCost} \\left(\\mathbf{x}, \\mathbf{p}\\right) + \\gamma \\, \\mathtt{softSl}\\left(\\mathbf{x}, \\mathbf{p}\\right) + , \\; \\text{s.t.} \\; \\mathbf{x} \\in \\mathcal{X}(\\mathbf{p}). \\end{split} \\end{equation} \\] In which, \\(\\mathbf{x}\\) represents the concatenated vector of variables of the problem, and \\(\\mathbf{p}\\) represents the exogenous parameters of the model, e.g., capital costs, demand, etc. \\(\\mathcal{X}\\) represents the feasible set of constraints of the model, e.g. asset balance, and so forth. Finally, the scalars \\(\\alpha, \\beta, \\gamma \\in \\mathbb{R}_{+}\\) , are arbitrary scaling factors. Objective function The objective function has three main components, viz., Term Description \\(\\mathtt{NPV} \\left(\\mathbf{x}, \\mathbf{p}\\right)\\) Net present value \\(\\mathtt{termCost} \\left(\\mathbf{x}, \\mathbf{p}\\right)\\) Terminal cost \\(\\mathtt{softSl}\\left(\\mathbf{x}, \\mathbf{p}\\right)\\) Soft service-life cost. Net present value, is composed of the overnight capital, O&M, fuel, and retirement costs, adjusted over time. Terminal cost compensates for the myopic results, as a consequence the fixed horizon model. Finally, soft service-life is methodology in which assets penalized for taking part in the system past their typical service-life. Next is a short description of the core component of the model, but it is noted that this section will not reference to all of the equations and variables found in the model. Refer to the manuscript for more details. Core: asset balance constraints The main component of dre4m is the set of variables and constraints that represent the changes to the technology asset makeup over time. Any case study for dre4m requires a set of initial assets. Then, for the specified time horizon, the model within dre4m would find the appropriate set of retirements, and retrofitting decisions for the existing assets. Moreover, it can also decide to deploy new capacity from a technology portfolio. Having establishing the most relevant decisions of the model, the balance terms are contingent upon the following sets, representing time, technology, and initial age, viz., Sets Description \\(T\\) Time set ( \\(\\left\\lbrace 0, 1, \\dots, \\mathtt{horizon}\\right\\rbrace\\) ) \\(I\\) Technology set ( \\(\\left\\lbrace \\text{tech 0}, \\text{tech 1}, \\dots\\right\\rbrace\\) ) \\(N_j\\) Initial age of existing asset set ( \\(N_j \\subseteq \\mathbb{Z}_{\\geq 0}\\) ) \\(K_i\\) Sub-technology for existing assets \\(\\tilde{K}_i\\) Sub-technology for new assets. The following variables ( \\(\\in\\mathbb{R}_{\\geq 0}\\) ) are thus, recognized, variable description \\(w^t_{i,j}\\) existing assets, \\(t \\in T, i \\in I, j \\in N_i\\) \\(y^t_{i,k,j}\\) retrofitted assets transition, \\(t \\in T, i \\in I, k \\in K_i, j \\in N_i\\) \\(u^{t}_{i,j}\\) retired assets \\(t \\in T, i \\in I, j \\in N_i\\) \\(z^t_{i,k,j}\\) retrofitted assets, \\(t \\in T, i \\in I, k \\in K_i, j \\in N_i\\) \\(\\overline{u}^t_{i,k,j}\\) retired retrofitted assets, \\(t \\in T, i \\in I, k \\in K_i, j \\in N_i\\) \\(x^{t}_{i,k,j}\\) new assets, \\(t,j \\in T, i \\in I, k \\in \\tilde{K}_i\\) \\(v^t_{i,k,j}\\) retired new assets, \\(t,j \\in T, i \\in I, k \\in \\tilde{K}_i\\) \\(\\tilde{x}^t_{i,k}\\) new allocated, \\(t,j \\in T, i \\in I, k \\in \\tilde{K}_i\\) . Existing From a point in time to the next, existing assets can either be retired, undergo a number of retrofits, and remain the same. This corresponds to the decision tree, from the following figure. .aligncenter { text-align: center; } This can be interpreted as an algebraic expression as follows, \\[ w^{t+1}_{i,j} = w^{t}_{i,j} - u^{t}_{i,j} - \\sum_{k \\in K_i} y^{t}_{i, k,j}, \\; \\forall t \\in T, i \\in I, j \\in N_i. \\] Existing-retrofitted If an asset is subject to retrofitting, i.e. at time \\(t\\) , for asset of kind \\(i\\) , and base age \\(j\\) , \\(y^t_{i,k,j} > 0\\) for some \\(k\\in K_i\\) , said asset enters a separate balance for retrofitted-assets. From that point, the retrofitted-asset can either be retired or remain unchanged at the next point. This is shown in the following picture. Which results in the following algebraic expression, \\[ z^{t+1}_{i,k,j} = z^{t}_{i,k,j} - \\overline{u}^t_{i,k,j} + y^t_{i,k,j},\\; \\forall t \\in T, i \\in I, k \\in K_i, j \\in N_i. \\] New-asset New assets are allocated strategically, i.e. at time \\(t\\) , for kind \\(i\\) , there is \\(\\tilde{x}^t_{i,k}>0\\) for some \\(k \\in \\tilde{K}_i\\) . Then, these enter their own tally following the next equation, \\[ x^t_{i,k,t} = \\tilde{x}^t_{i,k}, \\; \\forall t\\in T, i\\in I, k\\in \\tilde{K}_i. \\] Moreover, the new assets can either be retired, or continue to the next point, this is laid out in the following figure and equation. \\[ x^{t+1}_{i,k,j} = x^{t}_{i,k,j} - v^t_{i,k,j} ,\\; \\forall t,j \\in T, i \\in I, k \\in \\tilde{K}_i. \\] Supporting constraints Following the supposition of an initial amount of existing assets of different kinds, the variables are linked by the following equation, \\[ w^0_{i,j} = \\mathtt{initCap}_{i,j}, \\; \\forall i\\in I, j\\in N_i. \\] Also, it is assumed that no retrofitted-assets exists at the initial time. \\[ z^0_{i,k,j} = 0, \\; \\forall i\\in I, k \\in K_i, j\\in N_i. \\] Concluding remarks It is encouraged to refer to the dre4m manuscript where the complete model is laid out. This page is a brief summary of some core aspects of the model.","title":"Model"},{"location":"model/#model","text":"This section provides a shortcut description of the model behind dre4m . For the purpose of laying out the core concepts, notation has been simplified from the original paper. The problem behind the diversification of the technology of a sector can be summarized by the following linear program, \\[ \\begin{equation} \\begin{split} \\min\\; O\\left(\\mathbf{x}, \\mathbf{p}\\right):= \\alpha \\, \\mathtt{NPV} \\left(\\mathbf{x}, \\mathbf{p}\\right) + \\beta \\, \\mathtt{termCost} \\left(\\mathbf{x}, \\mathbf{p}\\right) + \\gamma \\, \\mathtt{softSl}\\left(\\mathbf{x}, \\mathbf{p}\\right) + , \\; \\text{s.t.} \\; \\mathbf{x} \\in \\mathcal{X}(\\mathbf{p}). \\end{split} \\end{equation} \\] In which, \\(\\mathbf{x}\\) represents the concatenated vector of variables of the problem, and \\(\\mathbf{p}\\) represents the exogenous parameters of the model, e.g., capital costs, demand, etc. \\(\\mathcal{X}\\) represents the feasible set of constraints of the model, e.g. asset balance, and so forth. Finally, the scalars \\(\\alpha, \\beta, \\gamma \\in \\mathbb{R}_{+}\\) , are arbitrary scaling factors.","title":"Model"},{"location":"model/#objective-function","text":"The objective function has three main components, viz., Term Description \\(\\mathtt{NPV} \\left(\\mathbf{x}, \\mathbf{p}\\right)\\) Net present value \\(\\mathtt{termCost} \\left(\\mathbf{x}, \\mathbf{p}\\right)\\) Terminal cost \\(\\mathtt{softSl}\\left(\\mathbf{x}, \\mathbf{p}\\right)\\) Soft service-life cost. Net present value, is composed of the overnight capital, O&M, fuel, and retirement costs, adjusted over time. Terminal cost compensates for the myopic results, as a consequence the fixed horizon model. Finally, soft service-life is methodology in which assets penalized for taking part in the system past their typical service-life. Next is a short description of the core component of the model, but it is noted that this section will not reference to all of the equations and variables found in the model. Refer to the manuscript for more details.","title":"Objective function"},{"location":"model/#core-asset-balance-constraints","text":"The main component of dre4m is the set of variables and constraints that represent the changes to the technology asset makeup over time. Any case study for dre4m requires a set of initial assets. Then, for the specified time horizon, the model within dre4m would find the appropriate set of retirements, and retrofitting decisions for the existing assets. Moreover, it can also decide to deploy new capacity from a technology portfolio. Having establishing the most relevant decisions of the model, the balance terms are contingent upon the following sets, representing time, technology, and initial age, viz., Sets Description \\(T\\) Time set ( \\(\\left\\lbrace 0, 1, \\dots, \\mathtt{horizon}\\right\\rbrace\\) ) \\(I\\) Technology set ( \\(\\left\\lbrace \\text{tech 0}, \\text{tech 1}, \\dots\\right\\rbrace\\) ) \\(N_j\\) Initial age of existing asset set ( \\(N_j \\subseteq \\mathbb{Z}_{\\geq 0}\\) ) \\(K_i\\) Sub-technology for existing assets \\(\\tilde{K}_i\\) Sub-technology for new assets. The following variables ( \\(\\in\\mathbb{R}_{\\geq 0}\\) ) are thus, recognized, variable description \\(w^t_{i,j}\\) existing assets, \\(t \\in T, i \\in I, j \\in N_i\\) \\(y^t_{i,k,j}\\) retrofitted assets transition, \\(t \\in T, i \\in I, k \\in K_i, j \\in N_i\\) \\(u^{t}_{i,j}\\) retired assets \\(t \\in T, i \\in I, j \\in N_i\\) \\(z^t_{i,k,j}\\) retrofitted assets, \\(t \\in T, i \\in I, k \\in K_i, j \\in N_i\\) \\(\\overline{u}^t_{i,k,j}\\) retired retrofitted assets, \\(t \\in T, i \\in I, k \\in K_i, j \\in N_i\\) \\(x^{t}_{i,k,j}\\) new assets, \\(t,j \\in T, i \\in I, k \\in \\tilde{K}_i\\) \\(v^t_{i,k,j}\\) retired new assets, \\(t,j \\in T, i \\in I, k \\in \\tilde{K}_i\\) \\(\\tilde{x}^t_{i,k}\\) new allocated, \\(t,j \\in T, i \\in I, k \\in \\tilde{K}_i\\) .","title":"Core: asset balance constraints"},{"location":"model/#existing","text":"From a point in time to the next, existing assets can either be retired, undergo a number of retrofits, and remain the same. This corresponds to the decision tree, from the following figure. .aligncenter { text-align: center; } This can be interpreted as an algebraic expression as follows, \\[ w^{t+1}_{i,j} = w^{t}_{i,j} - u^{t}_{i,j} - \\sum_{k \\in K_i} y^{t}_{i, k,j}, \\; \\forall t \\in T, i \\in I, j \\in N_i. \\]","title":"Existing"},{"location":"model/#existing-retrofitted","text":"If an asset is subject to retrofitting, i.e. at time \\(t\\) , for asset of kind \\(i\\) , and base age \\(j\\) , \\(y^t_{i,k,j} > 0\\) for some \\(k\\in K_i\\) , said asset enters a separate balance for retrofitted-assets. From that point, the retrofitted-asset can either be retired or remain unchanged at the next point. This is shown in the following picture. Which results in the following algebraic expression, \\[ z^{t+1}_{i,k,j} = z^{t}_{i,k,j} - \\overline{u}^t_{i,k,j} + y^t_{i,k,j},\\; \\forall t \\in T, i \\in I, k \\in K_i, j \\in N_i. \\]","title":"Existing-retrofitted"},{"location":"model/#new-asset","text":"New assets are allocated strategically, i.e. at time \\(t\\) , for kind \\(i\\) , there is \\(\\tilde{x}^t_{i,k}>0\\) for some \\(k \\in \\tilde{K}_i\\) . Then, these enter their own tally following the next equation, \\[ x^t_{i,k,t} = \\tilde{x}^t_{i,k}, \\; \\forall t\\in T, i\\in I, k\\in \\tilde{K}_i. \\] Moreover, the new assets can either be retired, or continue to the next point, this is laid out in the following figure and equation. \\[ x^{t+1}_{i,k,j} = x^{t}_{i,k,j} - v^t_{i,k,j} ,\\; \\forall t,j \\in T, i \\in I, k \\in \\tilde{K}_i. \\]","title":"New-asset"},{"location":"model/#supporting-constraints","text":"Following the supposition of an initial amount of existing assets of different kinds, the variables are linked by the following equation, \\[ w^0_{i,j} = \\mathtt{initCap}_{i,j}, \\; \\forall i\\in I, j\\in N_i. \\] Also, it is assumed that no retrofitted-assets exists at the initial time. \\[ z^0_{i,k,j} = 0, \\; \\forall i\\in I, k \\in K_i, j\\in N_i. \\]","title":"Supporting constraints"},{"location":"model/#concluding-remarks","text":"It is encouraged to refer to the dre4m manuscript where the complete model is laid out. This page is a brief summary of some core aspects of the model.","title":"Concluding remarks"}]}